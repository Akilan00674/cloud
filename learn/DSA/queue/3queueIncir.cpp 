#include <iostream>
using namespace std;

struct CircularQueue {
    int* arr;
    int front;
    int rear;
    int max;
};

void enq(CircularQueue& q, int value) {
    if ((q.rear + 1) % q.max == q.front) {
        cout << "isfull" << endl;
        return;
    } else if (q.front == -1) {
        q.front = 0;
        q.rear = 0;
        q.arr[q.rear] = value;
    } else {
        q.rear = (q.rear + 1) % q.max;
        q.arr[q.rear] = value;
    }
}

void deq(CircularQueue& q) {
    if (q.front == -1) {
        cout << "empty" << endl;
        return;
    } else {
        cout << "deleted element: " << q.arr[q.front] << endl;
        if (q.front == q.rear) {
            q.front = -1;
            q.rear = -1;
        } else {
            q.front = (q.front + 1) % q.max;
        }
    }
}

void display(CircularQueue q) {
    if (q.front == -1) {
        cout << "empty" << endl;
        return;
    } else {
        int i = q.front;
        do {
            cout << q.arr[i] << endl;
            i = (i + 1) % q.max;
        } while (i != (q.rear + 1) % q.max);
    }
}

int main() {
    CircularQueue q;
    q.max = 5;
    q.front = -1;
    q.rear = -1;
    q.arr = new int[q.max];

    enq(q, 11);
    enq(q, 12);
    enq(q, 13);
    enq(q, 14);
    enq(q, 15);

    cout << "Queue contents:" << endl;
    display(q);

    deq(q);
    cout << "Queue after dequeue:" << endl;
    display(q);

    deq(q);
    cout << "Queue after another dequeue:" << endl;
    display(q);

    enq(q,16);
    cout << "Queue after enqueue 16:" << endl;
    display(q);

    deq(q);
    deq(q);
    deq(q);
    deq(q);

    cout << "Queue after all dequeues:" << endl;
    display(q);
    
    delete[] q.arr; // Important: deallocate memory
    return 0;
}
