1)*********at the end**********
#include <iostream>
using namespace std;

struct Node {
    int data;
    Node* addr;
};

void insertAtEnd(Node*& head, int value) {
    Node* newNode = new Node();
    newNode->data = value;
    newNode->addr = nullptr;
    if (head == nullptr) {
        head = newNode;
    } else {
        Node* current = head;
        while (current->addr != nullptr) {
            current = current->addr;
        }
        current->addr = newNode;
    }
}

void displayList(Node* head) {
    Node* current = head;
    while (current != nullptr) {
        cout << current->data << " ";
        current = current->addr;
    }
    cout << endl;
}

int main() {
    int n;
    cin >> n;

    Node* head = nullptr;

    for (int i = 0; i < n; i++) {
        int value;
        cin >> value;
        insertAtEnd(head, value);
    }

    displayList(head);

    return 0;
}
2)********at the beginning**********

#include <iostream>
using namespace std;

struct Node {
    int data;
    Node* next;
};

void insertAtBeginning(Node*& head, int value) {
    Node* newNode = new Node();
    newNode->data = value;
    newNode->next = null;
    head = newNode;
}

void displayList(Node* head) {
    Node* current = head;
    while (current != nullptr) {
        cout << current->data << " ";
        current = current->next;
    }
    cout<< endl;
}

int main() {
    int n;
    cin >> n;

    Node* head = nullptr;

    for (int i = 0; i < n; i++) {
        int value;
        cin >> value;
        insertAtBeginning(head, value);
    }

    displayList(head);

    return 0;
}
3)**********insertAtPosition************
#include <iostream>
using namespace std;

struct Node {
    int data;
    Node* next;
};

void insertAtPosition(Node*& head, int position, int value) {
    Node* newNode = new Node();
    newNode->data = value;
    newNode->next = nullptr;

    if (head == nullptr ) {        
        head = newNode;
    }

    Node* temp = head;
    while (position > 2 && temp->next != nullptr) {
        temp = temp->next;
        position--;
    }

    if (temp == nullptr) {
        cout << "Position out of bounds" << endl;
    } else {
        newNode->next = temp->next;
        temp->next = newNode;
    }
}

void insertAtEnd(Node*& head, int value) {
    Node* newNode = new Node();
    newNode->data = value;
    newNode->next = nullptr;
    if (head == nullptr) {
        head = newNode;
    } else {
        Node* temp = head;
        while (temp->next != nullptr) {
            temp = temp->next;
        }
        temp->next = newNode;
    }
}

void displayList(Node* head) {
    Node* temp = head;
    while (temp != nullptr) {
        cout << temp->data << " ";
        temp = temp->next;
    }
    cout << endl;
}

int main() {
    int n;
    cin >> n;

    Node* head = nullptr;

    for (int i = 0; i < n; i++) {
        int value;
        cin >> value;
        insertAtEnd(head, value);
    }

    int pos, value;
    cin >> pos >> value;
    insertAtPosition(head, pos, value);

    displayList(head);

    return 0;
}

********left-shift********

// You are using GCC
#include <iostream>
using namespace std;

struct Node {
    int data;
    Node* next;
};

Node* createNode(int data) {
    Node* newNode = new Node;
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

Node* insertNode(Node* head, int data) {
    if (head == NULL)
        head = createNode(data);
    else {
        Node* temp = head;
        while (temp->next != NULL)
            temp = temp->next;
        temp->next = createNode(data);
    }
    return head;
}
void left(Node*& head,int k)
{
    for(int i = 0;i<k;i++)
    {
        Node* ls =head;
        head=head->next;
        Node *temp=head;
        while(temp->next!=nullptr)
        {
            temp=temp->next;
        }
        temp->next=ls;
        ls->next=nullptr;
    }
}
void printList(Node* head) {
    Node* temp = head;
    while (temp != NULL) {
        cout << temp->data << " ";
        temp = temp->next;
    }
    cout << endl;
}

int main() {
    int N, k;
    cin >> N;

    Node* head = NULL;
    for (int i = 0; i < N; i++) {
        int value;
        cin >> value;
        head = insertNode(head, value);
    }

    cin >> k;
    
    left(head,k);


    printList(head);

    return 0;
}

**********insertSorted************
#include <iostream>
using namespace std;

struct Node {
    int data;
    Node* next;
};

void insertAtEnd(Node*& head, int value) {
    Node* newNode = new Node();
    newNode->data = value;
    newNode->next = nullptr;
    if (head == nullptr) {
        head = newNode;
    } else {
        Node* current = head;
        while (current->next != nullptr) {
            current = current->next;
        }
        current->next = newNode;
    }
}

void insertSorted(Node*& head, int value) {
    Node* newNode = new Node();
    newNode->data = value;
    newNode->next = nullptr;
    if (head == nullptr || head->data >= value) {
        newNode->next = head;
        head = newNode;
    } else {
        Node* current = head;
        while (current->next m!= nullptr && current->next->data < value) {
            current = current->next;
        }
        newNode->next = current->next;
        current->next = newNode;
    }
}

void displayList(Node* head) {
    while (head != nullptr) {
        cout << head->data << " ";
        head = head->next;
    }
    cout << endl;
}

int main() {
    int n, value, newData;
    cin >> n;
    Node* head = nullptr;

    for (int i = 0; i < n; i++) {
        cin >> value;
        insertAtEnd(head, value);
    }

    cout << "Original data points: ";
    displayList(head);

    cin >> newData;
    insertSorted(head, newData);

    cout << "Updated data points: ";
    displayList(head);

    return 0;
}



*********delete the first and last node *********



#include <iostream>
using namespace std;

struct Node {
    int data;
    Node* next;
};

void insertAtEnd(Node*& head, int value) {
    Node* newNode = new Node();
    newNode->data = value;
    newNode->next = nullptr;
    if (head == nullptr) {
        head = newNode;
    } else {
        Node* current = head;
        while (current->next != nullptr) {
            current = current->next;
        }
        current->next = newNode;
    }
}

void deleteLastNode(Node*& head) {
    if (head == nullptr) {
        return;
    }
    if (head->next == nullptr) {
        delete head;
        head = nullptr;
        return;
    }
    Node* current = head;
    while (current->next->next != nullptr) {
        current = current->next;
    }
    delete current->next;
    current->next = nullptr;
}
void deletefirstNode(Node*& head) 
{
	Node* temp = head;
	if(head == NULL)
	{
		cout<<"the list is empty";
	}
	else{
		head = temp->addr;
	    }
	delete head;
}

void displayList(Node* head) {
    Node* current = head;
    while (current != nullptr) {
        cout << current->data << " ";
        current = current->next;
    }
    cout << endl;
}

int main() {
    int n;
    cin >> n;

    Node* head = nullptr;

    for (int i = 0; i < n; i++) {
        int value;
        cin >> value;
        insertAtEnd(head, value);
    }

    deleteLastNode(head);

    displayList(head);

    return 0;
}
+++++++++++++++++++++++++++++++++++++++++++++++++
Got it! Here's the code where the user specifies which node to delete by its position (node index) in the list, not by the value:

```cpp
#include <iostream>
using namespace std;

struct Node {
    int data;
    Node* next;
};

void insertAtEnd(Node*& head, int value) {
    Node* newNode = new Node{value, nullptr};
    if (!head) {
        head = newNode;
    } else {
        Node* temp = head;
        while (temp->next) temp = temp->next;
        temp->next = newNode;
    }
}

void deleteNodeByPosition(Node*& head, int position) {
    if (!head) return;

    Node* temp = head;

    // If the head node itself is to be deleted
    if (position == 0) {
        head = temp->next;
        delete temp;
        return;
    }

    // Find the previous node of the node to be deleted
    for (int i = 0; temp != nullptr && i < position - 1; i++) {
        temp = temp->next;
    }

    // If the position is out of bounds
    if (temp == nullptr || temp->next == nullptr) {
        cout << "Position out of range" << endl;
        return;
    }

    // Node temp->next is the node to be deleted
    Node* next = temp->next->next;

    // Unlink the node from the linked list
    delete temp->next;
    temp->next = next;
}

void displayList(Node* head) {
    while (head) {
        cout << head->data << " ";
        head = head->next;
    }
    cout << endl;
}

int main() {
    Node* head = nullptr;
    int n, positionToDelete;

    cout << "Enter the number of elements in the list: ";
    cin >> n;

    cout << "Enter the elements of the list: ";
    for (int i = 0; i < n; i++) {
        int value;
        cin >> value;
        insertAtEnd(head, value);
    }

    cout << "Enter the position (index) of the node to delete: ";
    cin >> positionToDelete;

    deleteNodeByPosition(head, positionToDelete);

    cout << "List after deletion: ";
    displayList(head);

    return 0;
}
```

### How this works:
1. The program first takes the number of elements in the list and the list elements.
2. It then asks the user for the position (index) of the node they want to delete (starting from 0).
3. The `deleteNodeByPosition` function deletes the node at the given position. If the position is invalid, it prints a message saying so.
4. Finally, it displays the updated list.

This way, the deletion is based on the position of the node rather than its value.
+-----------------+------------------+
+				     +
+				     +	
+				     +

+-----------------+------------------+
